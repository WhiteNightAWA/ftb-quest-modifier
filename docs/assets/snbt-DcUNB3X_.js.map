{"version":3,"file":"snbt-DcUNB3X_.js","sources":["../../node_modules/snbt-js/src/snbt.js"],"sourcesContent":["const gettype = Object.prototype.toString;\r\n\r\nexport function changeToFloat(val) {\r\n    if ((val / 1).toString().includes(\".\")) {\r\n        return (val / 1);\r\n    } else {\r\n        return (val / 1).toFixed(1);\r\n    };\r\n};\r\n\r\nexport function highlightCode(text, type) {\r\n    if (type == \"key\") {\r\n        return `<span style=\"color:aqua\">${text}</span>`\r\n    } else if (type == \"str\") {\r\n        return `<span style=\"color:rgb(84,351,84)\">${text}</span>`\r\n    } else if (type == \"num\") {\r\n        return `<span style=\"color:orange\">${text}</span>`\r\n    } else if (type == \"bool\") {\r\n        return `<span style=\"color:yellow\">${text}</span>`\r\n    } else if (type == \"unit\") {\r\n        return `<span style=\"color:red\">${text}</span>`\r\n    };\r\n\r\n}\r\n\r\nexport class NbtObject {\r\n    constructor(childsal) {\r\n        this.childs = {};\r\n        this.addChild = function (key, value) {\r\n            this.childs[key] = value;\r\n        };\r\n        this.isempty = function () {\r\n            return (Object.keys(this.childs).length == 0 ? true : false);\r\n        };\r\n        this.get = function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            if (gettype.call(args[0]) == \"[object Array]\") {\r\n                args = args[0];\r\n            };\r\n            if (args.length == 1) {\r\n                args = parsePath(args[0])\r\n            }\r\n            if (args.length == 1) {\r\n                return this.childs[args[0]];\r\n            } else if (args.length > 1) {\r\n                return this.childs[args[0]].get(args.slice(1));\r\n            } else {\r\n                return this;\r\n            };\r\n        };\r\n        this.set = function (index, value) {\r\n            if ([\"[object String]\", \"[object Number]\"].includes(gettype.call(index))) {\r\n                this.childs[index] = value;\r\n            } else if (gettype.call(index) == \"[object Array]\") {\r\n                if (index.length == 1) {\r\n                    this.childs[index[0]] = value;\r\n                } else if (index.length > 1) {\r\n                    this.get(index.slice(0, -1)).set(index.slice(-1), value);\r\n                };\r\n            };\r\n        };\r\n        this.text = function (ispretty) {\r\n            var tl = [];\r\n            for (var i in this.childs) {\r\n                tl.push(`${ispretty ? highlightCode(i, \"key\") : i}: ${this.childs[i].text(ispretty)}`);\r\n            };\r\n            return `{${tl.join(\", \")}}`;\r\n        };\r\n        if (childsal) {\r\n            for (var index in childsal) {\r\n                this.addChild(index, childsal[index])\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nexport class NbtList {\r\n    constructor(childsal) {\r\n        this.childs = [];\r\n        this.addChild = function (value) {\r\n            this.childs.push(value)\r\n        };\r\n        this.isempty = function () {\r\n            return (this.childs.length == 0 ? true : false);\r\n        };\r\n        this.get = function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            if (gettype.call(args[0]) == \"[object Array]\") {\r\n                args = args[0];\r\n            };\r\n            if (args.length == 1) {\r\n                args = parsePath(args[0])\r\n            }\r\n            if (args.length == 1) {\r\n                return this.childs[args[0]];\r\n            } else if (args.length > 1) {\r\n                return this.childs[args[0]].get(args.slice(1));\r\n            } else {\r\n                return this;\r\n            };\r\n        };\r\n        this.set = function (index, value) {\r\n            if ([\"[object String]\", \"[object Number]\"].includes(gettype.call(index))) {\r\n                this.childs[index] = value;\r\n            } else if (gettype.call(index) == \"[object Array]\") {\r\n                if (index.length == 1) {\r\n                    this.childs[index[0]] = value;\r\n                } else if (index.length > 1) {\r\n                    this.get(index.slice(0, -1)).set(index.slice(-1), value);\r\n                };\r\n            };\r\n        };\r\n        this.text = function (ispretty) {\r\n            var tl = [];\r\n            for (var i = 0; i < this.childs.length; i++) {\r\n                tl.push(this.childs[i].text(ispretty));\r\n            }\r\n            return `[${tl.join(\", \")}]`;\r\n        };\r\n        if (childsal) {\r\n            for (var i = 0; i < childsal.length; i++) {\r\n                this.addChild(childsal[i]);\r\n            }\r\n        };\r\n    };\r\n};\r\n\r\nexport class NbtIntArray {\r\n    constructor(childsal) {\r\n        this.childs = [];\r\n        this.addChild = function (value) {\r\n            if (value instanceof NbtNumber && value.unit == \"\") {\r\n                this.childs.push(value)\r\n            } else {\r\n                throw new Error(\"NbtIntArray only accept NbtNumber without unit\")\r\n            }\r\n        };\r\n        this.isempty = function () {\r\n            return (this.childs.length == 0 ? true : false);\r\n        };\r\n        this.get = function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            if (gettype.call(args[0]) == \"[object Array]\") {\r\n                args = args[0];\r\n            };\r\n            if (args.length == 1) {\r\n                args = parsePath(args[0])\r\n            }\r\n            if (args.length == 1) {\r\n                return this.childs[args[0]];\r\n            } else if (args.length > 1) {\r\n                throw new Error(\"NbtIntArray only accept one index\")\r\n            } else {\r\n                return this;\r\n            };\r\n        };\r\n        this.set = function (index, value) {\r\n            if (index.length == 1) {\r\n                if (value instanceof NbtNumber && value.unit == \"\") {\r\n                    this.childs[index[0]] = value;\r\n                } else {\r\n                    throw new Error(\"NbtIntArray only accept NbtNumber without unit\")\r\n                }\r\n            } else if (index.length > 1) {\r\n                throw new Error(\"NbtIntArray only accept one index\")\r\n            };\r\n        };\r\n        this.text = function (ispretty) {\r\n            var tl = [];\r\n            for (var i = 0; i < this.childs.length; i++) {\r\n                tl.push(this.childs[i].text(ispretty));\r\n            }\r\n            return `[I; ${tl.join(\", \")}]`;\r\n        };\r\n        if (childsal) {\r\n            for (var i = 0; i < childsal.length; i++) {\r\n                this.addChild(childsal[i]);\r\n            }\r\n        };\r\n    };\r\n};\r\n\r\nexport class NbtNumber {\r\n    constructor(value, unit = \"\") {\r\n        unit = unit.toLowerCase();\r\n        if (unit == \"b\") {\r\n            if (Math.round(value) > 127) {\r\n                this.value = 127;\r\n            } else if (Math.round(value) < -128) {\r\n                this.value = -128;\r\n            } else {\r\n                this.value = Math.round(value);\r\n            }\r\n\r\n        } else if (unit == \"s\") {\r\n            if (Math.round(value) > 32767) {\r\n                this.value = 32767;\r\n            } else if (Math.round(value) < -32768) {\r\n                this.value = -32768;\r\n            } else {\r\n                this.value = Math.round(value);\r\n            }\r\n        } else if (unit == \"l\") {\r\n            if (Math.round(value) > 9223372036854775807n) {\r\n                this.value = 9223372036854775807n;\r\n            } else if (Math.round(value) < -9223372036854775808n) {\r\n                this.value = -9223372036854775808n;\r\n            } else {\r\n                this.value = Math.round(value);\r\n            }\r\n        } else if (unit == \"d\") {\r\n            this.value = changeToFloat(value);\r\n        } else if (unit == \"f\") {\r\n            this.value = changeToFloat(value);\r\n        } else if (unit == \"\") {\r\n            this.value = Math.round(value);\r\n        } else {\r\n            this.value = value;\r\n        };\r\n        this.unit = unit;\r\n        this.text = function (ispretty) {\r\n            if (ispretty) {\r\n                return `${highlightCode(this.value.toString(), \"num\")}${unit ? highlightCode(this.unit, \"unit\") : \"\"}`\r\n            } else {\r\n                return `${this.value}${unit ? this.unit : \"\"}`\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nexport class NbtString {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.text = function (ispretty) {\r\n            // 转义特殊字符\r\n            let escapedValue = this.value\r\n                .replace(/\\\\/g, '\\\\\\\\')\r\n                .replace(/'/g, \"\\\\'\")\r\n                .replace(/\\n/g, \"\\\\n\")\r\n                .replace(/\\r/g, \"\\\\r\")\r\n                .replace(/\\t/g, \"\\\\t\");\r\n\r\n            if (ispretty) {\r\n                return highlightCode(`'${escapedValue}'`, \"str\");\r\n            } else {\r\n                return `'${escapedValue}'`;\r\n            }\r\n        };\r\n    };\r\n};\r\n\r\nexport class NbtBool {\r\n    constructor(value) {\r\n        this.value = value ? \"true\" : \"false\";\r\n        this.text = function (ispretty) {\r\n            if (ispretty) {\r\n                return highlightCode(`${this.value}`, \"bool\")\r\n            } else {\r\n                return `${this.value}`\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nexport class NbtNull {\r\n    constructor() {\r\n        this.value = null;\r\n    }\r\n    text = function (ispretty) {\r\n        if (ispretty) {\r\n            return highlightCode(\"null\", \"bool\"); // 使用布尔值的样式\r\n        } else {\r\n            return \"null\";\r\n        }\r\n    };\r\n}\r\n\r\nexport function arrangementNbt(str) {\r\n    str = str.replace(/(: *)([0-9\\.]+)([bfdis])/g, '$1new NbtNumber($2,\"$3\")');\r\n    str = str.replace(/(, *)([0-9\\.]+)([bfdis])( *[,\\]])/g, '$1new NbtNumber($2,\"$3\")$4');\r\n    str = str.replace(/(\\[ *)([0-9\\.]+)([bfdis])/g, '$1new NbtNumber($2,\"$3\")');\r\n\r\n    return str;\r\n}\r\n\r\n/**\r\n * \r\n * @deprecated\r\n * @param {*} str \r\n * @returns \r\n */\r\nexport function decodeNbtStr(str) {\r\n    jsObj = eval(\"obj=\" + arrangementNbt(str));\r\n    return changeObj(jsObj);\r\n}\r\n\r\nexport function changeObj(jsObj) {\r\n    if (gettype.call(jsObj) == \"[object String]\") {\r\n        return new NbtString(jsObj);\r\n    } else if (gettype.call(jsObj) == \"[object Boolean]\") {\r\n        return new NbtBool(jsObj);\r\n    } else if (gettype.call(jsObj) == \"[object Number]\") {\r\n        return new NbtNumber(jsObj);\r\n    } else if (gettype.call(jsObj) == \"[object Object]\") {\r\n        if (jsObj instanceof NbtNumber) {\r\n            return jsObj;\r\n        } else {\r\n            var a = new NbtObject();\r\n            for (var i in jsObj) {\r\n                a.addChild(i, changeObj(jsObj[i]))\r\n            }\r\n            return a;\r\n        }\r\n    } else if (gettype.call(jsObj) == \"[object Array]\") {\r\n        var a = new NbtList();\r\n        for (var i in jsObj) {\r\n            a.addChild(changeObj(jsObj[i]));\r\n        }\r\n        return a;\r\n    }\r\n}\r\n\r\nexport function parsePath(path) {\r\n    if (typeof path === 'number') {\r\n        return [path];\r\n    }\r\n\r\n    const tokens = [];\r\n    let current = '';\r\n    let inQuote = false;\r\n    let inBracket = false;\r\n    let hasQuoteInBracket = false;\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n        const char = path[i];\r\n\r\n        if (inQuote) {\r\n            if (char === '\"') {\r\n                inQuote = false;\r\n                if (inBracket) {\r\n                    hasQuoteInBracket = true;\r\n                }\r\n            } else {\r\n                current += char;\r\n            }\r\n        } else {\r\n            if (char === '\"') {\r\n                if (current !== '') {\r\n                    throw new Error('Unexpected double quote');\r\n                }\r\n                inQuote = true;\r\n            } else if (char === '[') {\r\n                if (inBracket) {\r\n                    throw new Error('Nested brackets are not allowed');\r\n                }\r\n                if (current !== '') {\r\n                    tokens.push(current);\r\n                    current = '';\r\n                } else if (tokens.length === 0 || typeof tokens[tokens.length - 1] === 'number') {\r\n                    throw new Error('Unexpected opening bracket');\r\n                }\r\n                inBracket = true;\r\n                hasQuoteInBracket = false;\r\n            } else if (char === ']') {\r\n                if (!inBracket) {\r\n                    throw new Error('Unexpected closing bracket');\r\n                }\r\n                let content = current.trim();\r\n                if (content === '') {\r\n                    throw new Error('Empty brackets are not allowed');\r\n                }\r\n                if (hasQuoteInBracket) {\r\n                    tokens.push(content);\r\n                } else {\r\n                    if (!/^\\d+$/.test(content)) {\r\n                        throw new Error('Brackets must contain only numbers or quoted strings');\r\n                    }\r\n                    tokens.push(parseInt(content, 10));\r\n                }\r\n                current = '';\r\n                inBracket = false;\r\n            } else if (char === '.') {\r\n                if (inBracket) {\r\n                    throw new Error('Dot not allowed inside brackets');\r\n                }\r\n                if (current !== '') {\r\n                    tokens.push(current);\r\n                    current = '';\r\n                } else if (i === 0 || path[i - 1] === '.') {\r\n                    throw new Error('Unexpected dot');\r\n                }\r\n            } else {\r\n                if (inBracket && !hasQuoteInBracket) {\r\n                    if (char === ' ' || char === '\\t') {\r\n                        // 允许空格\r\n                    } else if (char >= '0' && char <= '9') {\r\n                        current += char;\r\n                    } else {\r\n                        throw new Error(`Invalid character in bracket: '${char}'`);\r\n                    }\r\n                } else {\r\n                    current += char;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 结束后的状态检查\r\n    if (inQuote) throw new Error('Unclosed quote');\r\n    if (inBracket) throw new Error('Unclosed bracket');\r\n    if (current !== '') tokens.push(current);\r\n\r\n    return tokens;\r\n}\r\n\r\nexport function parseNbtString(str) {\r\n    let index = 0;\r\n    const length = str.length;\r\n\r\n    // 确保整个字符串被解析\r\n    function ensureEnd() {\r\n        skipWhitespace();\r\n        if (index < length) {\r\n            throw new Error(`Unexpected character: '${str[index]}'. Expected end of input.`);\r\n        }\r\n    }\r\n\r\n    function parseValue() {\r\n        skipWhitespace();\r\n        if (index >= length) {\r\n            throw new Error(\"Unexpected end of input\");\r\n        }\r\n\r\n        const char = str[index];\r\n\r\n        if (char === '{') {\r\n            const obj = parseObject();\r\n            return obj;\r\n        } else if (char === '[') {\r\n            const arr = parseArray();\r\n            return arr;\r\n        } else if (char === \"'\" || char === '\"') {\r\n            return parseString(char);\r\n        } else if (/[0-9-]/.test(char)) {\r\n            return parseNumber();\r\n        } else if (char === 't' && index + 4 <= length && str.substr(index, 4) === \"true\") {\r\n            index += 4;\r\n            return new NbtBool(true);\r\n        } else if (char === 'f' && index + 5 <= length && str.substr(index, 5) === \"false\") {\r\n            index += 5;\r\n            return new NbtBool(false);\r\n        } else if (char === 'n' && index + 4 <= length && str.substr(index, 4) === \"null\") {\r\n            index += 4;\r\n            return new NbtNull();\r\n        }\r\n        throw new Error(`Unexpected character: ${char}`);\r\n    }\r\n\r\n    function parseObject() {\r\n        index++; // 跳过 '{'\r\n        const obj = new NbtObject();\r\n        let first = true;\r\n        let expectComma = false;\r\n\r\n        while (index < length) {\r\n            skipWhitespace();\r\n\r\n            // 检查是否结束\r\n            if (str[index] === '}') {\r\n                index++;\r\n                return obj;\r\n            }\r\n\r\n            // 检查逗号分隔符\r\n            if (expectComma) {\r\n                if (str[index] === ',') {\r\n                    index++;\r\n                    skipWhitespace();\r\n                    // 允许尾随逗号: 检查逗号后是否直接是结束符\r\n                    if (str[index] === '}') continue;\r\n                } else {\r\n                    throw new Error(`Expected comma`);\r\n                }\r\n            }\r\n\r\n            const key = parseKey();\r\n            skipWhitespace();\r\n\r\n            // 检查键是否以数字开头（非引号包裹时）\r\n            if (!/^['\"]/.test(key) && /^\\d/.test(key)) {\r\n                throw new Error(`Key cannot start with a digit: ${key}`);\r\n            }\r\n\r\n            if (str[index] !== ':') {\r\n                throw new Error(`Expected colon`);\r\n            }\r\n            index++; // 跳过 ':'\r\n            skipWhitespace();\r\n\r\n            const value = parseValue();\r\n            obj.addChild(key, value);\r\n\r\n            first = false;\r\n            expectComma = true; // 下一个元素前需要逗号\r\n            skipWhitespace();\r\n        }\r\n        throw new Error(\"Unterminated object\");\r\n    }\r\n\r\n    function parseArray() {\r\n        index++; // 跳过 '['\r\n        // 检查是否IntArray\r\n        skipWhitespace();\r\n        let arr;\r\n        if (str[index] === 'I') {\r\n            index++;\r\n            skipWhitespace();\r\n            if (str[index] !== ';') {\r\n                throw new Error(`Expected semicolon`);\r\n            }\r\n            index++;\r\n            arr = new NbtIntArray();\r\n        } else {\r\n            arr = new NbtList();\r\n        }\r\n\r\n        let first = true;\r\n        let expectComma = false;\r\n\r\n        while (index < length) {\r\n            skipWhitespace();\r\n\r\n            // 检查是否结束\r\n            if (str[index] === ']') {\r\n                index++;\r\n                return arr;\r\n            }\r\n\r\n            // 检查逗号分隔符\r\n            if (expectComma) {\r\n                if (str[index] === ',') {\r\n                    index++;\r\n                    skipWhitespace();\r\n                    // 允许尾随逗号: 检查逗号后是否直接是结束符\r\n                    if (str[index] === ']') continue;\r\n                } else {\r\n                    throw new Error(`Expected comma`);\r\n                }\r\n            }\r\n\r\n            const value = parseValue();\r\n            arr.addChild(value);\r\n\r\n            first = false;\r\n            expectComma = true; // 下一个元素前需要逗号\r\n            skipWhitespace();\r\n        }\r\n        throw new Error(\"Unterminated array\");\r\n    }\r\n\r\n    function parseString(quoteChar) {\r\n        index++; // 跳过开头的引号\r\n        let result = \"\";\r\n        let escaped = false;\r\n\r\n        while (index < length) {\r\n            const char = str[index++];\r\n\r\n            if (escaped) {\r\n                // 处理转义字符\r\n                switch (char) {\r\n                    case 'n': result += '\\n'; break;\r\n                    case 'r': result += '\\r'; break;\r\n                    case 't': result += '\\t'; break;\r\n                    case 'b': result += '\\b'; break;\r\n                    case 'f': result += '\\f'; break;\r\n                    case 'v': result += '\\v'; break;\r\n                    case '0': result += '\\0'; break;\r\n                    case '\\\\': result += '\\\\'; break;\r\n                    case \"'\": result += \"'\"; break;\r\n                    case '\"': result += '\"'; break;\r\n                    case 'u':\r\n                        // 处理Unicode转义：\\uXXXX\r\n                        if (index + 4 > length) {\r\n                            throw new Error(\"Incomplete Unicode escape sequence\");\r\n                        }\r\n                        const hex = str.substring(index, index + 4);\r\n                        if (!/^[0-9a-fA-F]{4}$/.test(hex)) {\r\n                            throw new Error(`Invalid Unicode escape: \\\\u${hex}`);\r\n                        }\r\n                        result += String.fromCharCode(parseInt(hex, 16));\r\n                        index += 4;\r\n                        break;\r\n                    case 'x':\r\n                        // 处理十六进制转义：\\xXX\r\n                        if (index + 2 > length) {\r\n                            throw new Error(\"Incomplete hexadecimal escape sequence\");\r\n                        }\r\n                        const hexByte = str.substring(index, index + 2);\r\n                        if (!/^[0-9a-fA-F]{2}$/.test(hexByte)) {\r\n                            throw new Error(`Invalid hexadecimal escape: \\\\x${hexByte}`);\r\n                        }\r\n                        result += String.fromCharCode(parseInt(hexByte, 16));\r\n                        index += 2;\r\n                        break;\r\n                    default:\r\n                        // 处理未知转义序列 - 保留原样\r\n                        result += '\\\\' + char;\r\n                }\r\n                escaped = false;\r\n            } else if (char === \"\\\\\") {\r\n                escaped = true;\r\n            } else if (char === quoteChar) {\r\n                return new NbtString(result);\r\n            } else {\r\n                result += char;\r\n            }\r\n        }\r\n        throw new Error(\"Unterminated string\");\r\n    }\r\n\r\n    function parseNumber() {\r\n        let start = index;\r\n        // 匹配数字（包括负号、小数点和科学计数法）\r\n        if (str[index] === '-') {\r\n            index++;\r\n        }\r\n\r\n        // 整数部分\r\n        while (index < length && /[0-9]/.test(str[index])) {\r\n            index++;\r\n        }\r\n\r\n        // 小数部分\r\n        if (str[index] === '.') {\r\n            index++;\r\n            while (index < length && /[0-9]/.test(str[index])) {\r\n                index++;\r\n            }\r\n        }\r\n\r\n        // 指数部分\r\n        if (/[eE]/.test(str[index])) {\r\n            index++;\r\n            if (/[+-]/.test(str[index])) {\r\n                index++;\r\n            }\r\n            while (index < length && /[0-9]/.test(str[index])) {\r\n                index++;\r\n            }\r\n        }\r\n\r\n        const numStr = str.substring(start, index);\r\n        let unit = \"\";\r\n\r\n        // 检查单位后缀\r\n        if (index < length && /[bfdisl]/i.test(str[index])) {\r\n            unit = str[index++];\r\n        }\r\n\r\n        // 验证数字格式\r\n        if (!/^-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?$/.test(numStr)) {\r\n            throw new Error(`Invalid number format: ${numStr}`);\r\n        }\r\n\r\n        const numValue = parseFloat(numStr);\r\n        if (isNaN(numValue)) {\r\n            throw new Error(`Invalid number: ${numStr}`);\r\n        }\r\n\r\n        return new NbtNumber(numValue, unit);\r\n    }\r\n\r\n    function parseKey() {\r\n        skipWhitespace();\r\n        if (index >= length) {\r\n            throw new Error(\"Unexpected end of input while parsing key\");\r\n        }\r\n\r\n        // 键可以是字符串(单/双引号)或标识符\r\n        if (str[index] === \"'\" || str[index] === '\"') {\r\n            const quote = str[index];\r\n            index++;\r\n            return parseStringContent(quote);\r\n        }\r\n\r\n        // 标识符键：允许Unicode字符（包括中文）\r\n        let key = \"\";\r\n        while (index < length) {\r\n            const char = str[index];\r\n            // 允许Unicode字符（包括中文）、字母、数字、下划线、$\r\n            if (!/\\s/.test(char) && !/[{}[\\]:,]/.test(char)) {\r\n                key += char;\r\n                index++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!key) {\r\n            throw new Error(\"Empty key is not allowed\");\r\n        }\r\n\r\n        return key;\r\n    }\r\n\r\n    // 辅助函数：解析字符串内容（用于键和值）\r\n    function parseStringContent(quoteChar) {\r\n        let result = \"\";\r\n        let escaped = false;\r\n\r\n        while (index < length) {\r\n            const char = str[index++];\r\n\r\n            if (escaped) {\r\n                // 处理转义字符\r\n                switch (char) {\r\n                    case 'n': result += '\\n'; break;\r\n                    case 'r': result += '\\r'; break;\r\n                    case 't': result += '\\t'; break;\r\n                    case 'b': result += '\\b'; break;\r\n                    case 'f': result += '\\f'; break;\r\n                    case 'v': result += '\\v'; break;\r\n                    case '0': result += '\\0'; break;\r\n                    case '\\\\': result += '\\\\'; break;\r\n                    case \"'\": result += \"'\"; break;\r\n                    case '\"': result += '\"'; break;\r\n                    case 'u':\r\n                        // 处理Unicode转义：\\uXXXX\r\n                        if (index + 4 > length) {\r\n                            throw new Error(\"Incomplete Unicode escape sequence\");\r\n                        }\r\n                        const hex = str.substring(index, index + 4);\r\n                        if (!/^[0-9a-fA-F]{4}$/.test(hex)) {\r\n                            throw new Error(`Invalid Unicode escape: \\\\u${hex}`);\r\n                        }\r\n                        result += String.fromCharCode(parseInt(hex, 16));\r\n                        index += 4;\r\n                        break;\r\n                    case 'x':\r\n                        // 处理十六进制转义：\\xXX\r\n                        if (index + 2 > length) {\r\n                            throw new Error(\"Incomplete hexadecimal escape sequence\");\r\n                        }\r\n                        const hexByte = str.substring(index, index + 2);\r\n                        if (!/^[0-9a-fA-F]{2}$/.test(hexByte)) {\r\n                            throw new Error(`Invalid hexadecimal escape: \\\\x${hexByte}`);\r\n                        }\r\n                        result += String.fromCharCode(parseInt(hexByte, 16));\r\n                        index += 2;\r\n                        break;\r\n                    default:\r\n                        // 处理未知转义序列 - 保留原样\r\n                        result += '\\\\' + char;\r\n                }\r\n                escaped = false;\r\n            } else if (char === \"\\\\\") {\r\n                escaped = true;\r\n            } else if (char === quoteChar) {\r\n                return result;\r\n            } else {\r\n                result += char;\r\n            }\r\n        }\r\n        throw new Error(\"Unterminated string\");\r\n    }\r\n\r\n    function skipWhitespace() {\r\n        while (index < length && /\\s/.test(str[index])) {\r\n            index++;\r\n        }\r\n    }\r\n\r\n    try {\r\n        const value = parseValue();\r\n        ensureEnd();\r\n        return value;\r\n    } catch (e) {\r\n        // 添加位置信息\r\n        // context: before>>e<<after\r\n        const context = str.substring(Math.max(0, index - 10), index) + \">>\" + (str[index] || \"\") + \"<<\" + str.substring(index + 1, index + 10);\r\n        throw new Error(`${e.message} at position ${index}. Context: ...${context}...`);\r\n    }\r\n}\r\n\r\n"],"names":["gettype","changeToFloat","val","highlightCode","text","type","NbtObject","childsal","key","value","args","parsePath","index","ispretty","tl","i","NbtList","NbtIntArray","NbtNumber","unit","NbtString","escapedValue","NbtBool","NbtNull","path","tokens","current","inQuote","inBracket","hasQuoteInBracket","char","content","parseNbtString","str","length","ensureEnd","skipWhitespace","parseValue","parseObject","parseArray","parseString","parseNumber","obj","expectComma","parseKey","arr","quoteChar","result","escaped","hex","hexByte","start","numStr","numValue","quote","parseStringContent","e","context"],"mappings":"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","x_google_ignoreList":[0]}